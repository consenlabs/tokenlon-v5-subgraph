// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BuyBack extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BuyBack entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BuyBack entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BuyBack", id.toString(), this);
  }

  static load(id: string): BuyBack | null {
    return store.get("BuyBack", id) as BuyBack | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get eventAddr(): Bytes {
    let value = this.get("eventAddr");
    return value.toBytes();
  }

  set eventAddr(value: Bytes) {
    this.set("eventAddr", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get feeToken(): Bytes {
    let value = this.get("feeToken");
    return value.toBytes();
  }

  set feeToken(value: Bytes) {
    this.set("feeToken", Value.fromBytes(value));
  }

  get feeTokenAmount(): BigInt {
    let value = this.get("feeTokenAmount");
    return value.toBigInt();
  }

  set feeTokenAmount(value: BigInt) {
    this.set("feeTokenAmount", Value.fromBigInt(value));
  }

  get swappedLonAmount(): BigInt {
    let value = this.get("swappedLonAmount");
    return value.toBigInt();
  }

  set swappedLonAmount(value: BigInt) {
    this.set("swappedLonAmount", Value.fromBigInt(value));
  }

  get LFactor(): BigInt {
    let value = this.get("LFactor");
    return value.toBigInt();
  }

  set LFactor(value: BigInt) {
    this.set("LFactor", Value.fromBigInt(value));
  }

  get RFactor(): BigInt {
    let value = this.get("RFactor");
    return value.toBigInt();
  }

  set RFactor(value: BigInt) {
    this.set("RFactor", Value.fromBigInt(value));
  }

  get minBuy(): BigInt {
    let value = this.get("minBuy");
    return value.toBigInt();
  }

  set minBuy(value: BigInt) {
    this.set("minBuy", Value.fromBigInt(value));
  }

  get maxBuy(): BigInt {
    let value = this.get("maxBuy");
    return value.toBigInt();
  }

  set maxBuy(value: BigInt) {
    this.set("maxBuy", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class DistributeLon extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DistributeLon entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DistributeLon entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DistributeLon", id.toString(), this);
  }

  static load(id: string): DistributeLon | null {
    return store.get("DistributeLon", id) as DistributeLon | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get eventAddr(): Bytes {
    let value = this.get("eventAddr");
    return value.toBytes();
  }

  set eventAddr(value: Bytes) {
    this.set("eventAddr", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get treasuryAmount(): BigInt {
    let value = this.get("treasuryAmount");
    return value.toBigInt();
  }

  set treasuryAmount(value: BigInt) {
    this.set("treasuryAmount", Value.fromBigInt(value));
  }

  get lonStakingAmount(): BigInt {
    let value = this.get("lonStakingAmount");
    return value.toBigInt();
  }

  set lonStakingAmount(value: BigInt) {
    this.set("lonStakingAmount", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get scaleIndex(): BigDecimal {
    let value = this.get("scaleIndex");
    return value.toBigDecimal();
  }

  set scaleIndex(value: BigDecimal) {
    this.set("scaleIndex", Value.fromBigDecimal(value));
  }
}

export class MintLon extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintLon entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintLon entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintLon", id.toString(), this);
  }

  static load(id: string): MintLon | null {
    return store.get("MintLon", id) as MintLon | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get eventAddr(): Bytes {
    let value = this.get("eventAddr");
    return value.toBytes();
  }

  set eventAddr(value: Bytes) {
    this.set("eventAddr", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get mintedAmount(): BigInt {
    let value = this.get("mintedAmount");
    return value.toBigInt();
  }

  set mintedAmount(value: BigInt) {
    this.set("mintedAmount", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class BuyBackDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BuyBackDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BuyBackDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BuyBackDayData", id.toString(), this);
  }

  static load(id: string): BuyBackDayData | null {
    return store.get("BuyBackDayData", id) as BuyBackDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get dailyTreasuryAmount(): BigInt {
    let value = this.get("dailyTreasuryAmount");
    return value.toBigInt();
  }

  set dailyTreasuryAmount(value: BigInt) {
    this.set("dailyTreasuryAmount", Value.fromBigInt(value));
  }

  get dailyLonStakingAmount(): BigInt {
    let value = this.get("dailyLonStakingAmount");
    return value.toBigInt();
  }

  set dailyLonStakingAmount(value: BigInt) {
    this.set("dailyLonStakingAmount", Value.fromBigInt(value));
  }

  get dailyMintedAmount(): BigInt {
    let value = this.get("dailyMintedAmount");
    return value.toBigInt();
  }

  set dailyMintedAmount(value: BigInt) {
    this.set("dailyMintedAmount", Value.fromBigInt(value));
  }

  get lastUpdatedAt(): i32 {
    let value = this.get("lastUpdatedAt");
    return value.toI32();
  }

  set lastUpdatedAt(value: i32) {
    this.set("lastUpdatedAt", Value.fromI32(value));
  }

  get scaleIndex(): BigDecimal {
    let value = this.get("scaleIndex");
    return value.toBigDecimal();
  }

  set scaleIndex(value: BigDecimal) {
    this.set("scaleIndex", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class BuyBackTotal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BuyBackTotal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BuyBackTotal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BuyBackTotal", id.toString(), this);
  }

  static load(id: string): BuyBackTotal | null {
    return store.get("BuyBackTotal", id) as BuyBackTotal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTreasuryAmount(): BigInt {
    let value = this.get("totalTreasuryAmount");
    return value.toBigInt();
  }

  set totalTreasuryAmount(value: BigInt) {
    this.set("totalTreasuryAmount", Value.fromBigInt(value));
  }

  get totalLonStakingAmount(): BigInt {
    let value = this.get("totalLonStakingAmount");
    return value.toBigInt();
  }

  set totalLonStakingAmount(value: BigInt) {
    this.set("totalLonStakingAmount", Value.fromBigInt(value));
  }

  get totalMintedAmount(): BigInt {
    let value = this.get("totalMintedAmount");
    return value.toBigInt();
  }

  set totalMintedAmount(value: BigInt) {
    this.set("totalMintedAmount", Value.fromBigInt(value));
  }

  get lastUpdatedAt(): i32 {
    let value = this.get("lastUpdatedAt");
    return value.toI32();
  }

  set lastUpdatedAt(value: i32) {
    this.set("lastUpdatedAt", Value.fromI32(value));
  }

  get scaleIndex(): BigDecimal {
    let value = this.get("scaleIndex");
    return value.toBigDecimal();
  }

  set scaleIndex(value: BigDecimal) {
    this.set("scaleIndex", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class StakingRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakingRecord entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakingRecord entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakingRecord", id.toString(), this);
  }

  static load(id: string): StakingRecord | null {
    return store.get("StakingRecord", id) as StakingRecord | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get penalty(): BigInt {
    let value = this.get("penalty");
    return value.toBigInt();
  }

  set penalty(value: BigInt) {
    this.set("penalty", Value.fromBigInt(value));
  }

  get share(): BigInt {
    let value = this.get("share");
    return value.toBigInt();
  }

  set share(value: BigInt) {
    this.set("share", Value.fromBigInt(value));
  }

  get redeem(): boolean {
    let value = this.get("redeem");
    return value.toBoolean();
  }

  set redeem(value: boolean) {
    this.set("redeem", Value.fromBoolean(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get stakeType(): i32 {
    let value = this.get("stakeType");
    return value.toI32();
  }

  set stakeType(value: i32) {
    this.set("stakeType", Value.fromI32(value));
  }

  get cooldownSeconds(): BigInt {
    let value = this.get("cooldownSeconds");
    return value.toBigInt();
  }

  set cooldownSeconds(value: BigInt) {
    this.set("cooldownSeconds", Value.fromBigInt(value));
  }

  get cooldownDate(): i32 {
    let value = this.get("cooldownDate");
    return value.toI32();
  }

  set cooldownDate(value: i32) {
    this.set("cooldownDate", Value.fromI32(value));
  }
}

export class Staked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Staked entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Staked entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Staked", id.toString(), this);
  }

  static load(id: string): Staked | null {
    return store.get("Staked", id) as Staked | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get eventAddr(): Bytes {
    let value = this.get("eventAddr");
    return value.toBytes();
  }

  set eventAddr(value: Bytes) {
    this.set("eventAddr", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get share(): BigInt {
    let value = this.get("share");
    return value.toBigInt();
  }

  set share(value: BigInt) {
    this.set("share", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }
}

export class Redeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Redeem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Redeem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Redeem", id.toString(), this);
  }

  static load(id: string): Redeem | null {
    return store.get("Redeem", id) as Redeem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get eventAddr(): Bytes {
    let value = this.get("eventAddr");
    return value.toBytes();
  }

  set eventAddr(value: Bytes) {
    this.set("eventAddr", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get share(): BigInt {
    let value = this.get("share");
    return value.toBigInt();
  }

  set share(value: BigInt) {
    this.set("share", Value.fromBigInt(value));
  }

  get penalty(): BigInt {
    let value = this.get("penalty");
    return value.toBigInt();
  }

  set penalty(value: BigInt) {
    this.set("penalty", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }
}

export class StakedDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakedDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakedDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakedDayData", id.toString(), this);
  }

  static load(id: string): StakedDayData | null {
    return store.get("StakedDayData", id) as StakedDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get dailyStakedAmount(): BigInt {
    let value = this.get("dailyStakedAmount");
    return value.toBigInt();
  }

  set dailyStakedAmount(value: BigInt) {
    this.set("dailyStakedAmount", Value.fromBigInt(value));
  }

  get penalty(): BigInt {
    let value = this.get("penalty");
    return value.toBigInt();
  }

  set penalty(value: BigInt) {
    this.set("penalty", Value.fromBigInt(value));
  }
}

export class StakedChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakedChange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakedChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakedChange", id.toString(), this);
  }

  static load(id: string): StakedChange | null {
    return store.get("StakedChange", id) as StakedChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get stakedAmount(): BigInt {
    let value = this.get("stakedAmount");
    return value.toBigInt();
  }

  set stakedAmount(value: BigInt) {
    this.set("stakedAmount", Value.fromBigInt(value));
  }

  get penalty(): BigInt {
    let value = this.get("penalty");
    return value.toBigInt();
  }

  set penalty(value: BigInt) {
    this.set("penalty", Value.fromBigInt(value));
  }

  get added(): boolean {
    let value = this.get("added");
    return value.toBoolean();
  }

  set added(value: boolean) {
    this.set("added", Value.fromBoolean(value));
  }
}

export class StakedTotal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakedTotal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakedTotal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakedTotal", id.toString(), this);
  }

  static load(id: string): StakedTotal | null {
    return store.get("StakedTotal", id) as StakedTotal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalStakedAmount(): BigInt {
    let value = this.get("totalStakedAmount");
    return value.toBigInt();
  }

  set totalStakedAmount(value: BigInt) {
    this.set("totalStakedAmount", Value.fromBigInt(value));
  }

  get scaleIndex(): BigDecimal {
    let value = this.get("scaleIndex");
    return value.toBigDecimal();
  }

  set scaleIndex(value: BigDecimal) {
    this.set("scaleIndex", Value.fromBigDecimal(value));
  }
}

export class Cooldown extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Cooldown entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Cooldown entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Cooldown", id.toString(), this);
  }

  static load(id: string): Cooldown | null {
    return store.get("Cooldown", id) as Cooldown | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get eventAddr(): Bytes {
    let value = this.get("eventAddr");
    return value.toBytes();
  }

  set eventAddr(value: Bytes) {
    this.set("eventAddr", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get cooldownSeconds(): BigInt {
    let value = this.get("cooldownSeconds");
    return value.toBigInt();
  }

  set cooldownSeconds(value: BigInt) {
    this.set("cooldownSeconds", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }
}

export class SetFeeToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetFeeToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetFeeToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetFeeToken", id.toString(), this);
  }

  static load(id: string): SetFeeToken | null {
    return store.get("SetFeeToken", id) as SetFeeToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get eventAddr(): Bytes {
    let value = this.get("eventAddr");
    return value.toBytes();
  }

  set eventAddr(value: Bytes) {
    this.set("eventAddr", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get feeToken(): Bytes {
    let value = this.get("feeToken");
    return value.toBytes();
  }

  set feeToken(value: Bytes) {
    this.set("feeToken", Value.fromBytes(value));
  }

  get exchangeIndex(): BigInt {
    let value = this.get("exchangeIndex");
    return value.toBigInt();
  }

  set exchangeIndex(value: BigInt) {
    this.set("exchangeIndex", Value.fromBigInt(value));
  }

  get path(): Array<Bytes> {
    let value = this.get("path");
    return value.toBytesArray();
  }

  set path(value: Array<Bytes>) {
    this.set("path", Value.fromBytesArray(value));
  }

  get LFactor(): BigInt {
    let value = this.get("LFactor");
    return value.toBigInt();
  }

  set LFactor(value: BigInt) {
    this.set("LFactor", Value.fromBigInt(value));
  }

  get RFactor(): BigInt {
    let value = this.get("RFactor");
    return value.toBigInt();
  }

  set RFactor(value: BigInt) {
    this.set("RFactor", Value.fromBigInt(value));
  }

  get minBuy(): BigInt {
    let value = this.get("minBuy");
    return value.toBigInt();
  }

  set minBuy(value: BigInt) {
    this.set("minBuy", Value.fromBigInt(value));
  }

  get maxBuy(): BigInt {
    let value = this.get("maxBuy");
    return value.toBigInt();
  }

  set maxBuy(value: BigInt) {
    this.set("maxBuy", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class EnableFeeToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EnableFeeToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EnableFeeToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EnableFeeToken", id.toString(), this);
  }

  static load(id: string): EnableFeeToken | null {
    return store.get("EnableFeeToken", id) as EnableFeeToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get eventAddr(): Bytes {
    let value = this.get("eventAddr");
    return value.toBytes();
  }

  set eventAddr(value: Bytes) {
    this.set("eventAddr", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get feeToken(): Bytes {
    let value = this.get("feeToken");
    return value.toBytes();
  }

  set feeToken(value: Bytes) {
    this.set("feeToken", Value.fromBytes(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class FeeToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FeeToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FeeToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FeeToken", id.toString(), this);
  }

  static load(id: string): FeeToken | null {
    return store.get("FeeToken", id) as FeeToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchangeIndex(): BigInt {
    let value = this.get("exchangeIndex");
    return value.toBigInt();
  }

  set exchangeIndex(value: BigInt) {
    this.set("exchangeIndex", Value.fromBigInt(value));
  }

  get path(): Array<Bytes> {
    let value = this.get("path");
    return value.toBytesArray();
  }

  set path(value: Array<Bytes>) {
    this.set("path", Value.fromBytesArray(value));
  }

  get LFactor(): BigInt {
    let value = this.get("LFactor");
    return value.toBigInt();
  }

  set LFactor(value: BigInt) {
    this.set("LFactor", Value.fromBigInt(value));
  }

  get RFactor(): BigInt {
    let value = this.get("RFactor");
    return value.toBigInt();
  }

  set RFactor(value: BigInt) {
    this.set("RFactor", Value.fromBigInt(value));
  }

  get minBuy(): BigInt {
    let value = this.get("minBuy");
    return value.toBigInt();
  }

  set minBuy(value: BigInt) {
    this.set("minBuy", Value.fromBigInt(value));
  }

  get maxBuy(): BigInt {
    let value = this.get("maxBuy");
    return value.toBigInt();
  }

  set maxBuy(value: BigInt) {
    this.set("maxBuy", Value.fromBigInt(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakeCount(): i32 {
    let value = this.get("stakeCount");
    return value.toI32();
  }

  set stakeCount(value: i32) {
    this.set("stakeCount", Value.fromI32(value));
  }

  get buyBackCount(): i32 {
    let value = this.get("buyBackCount");
    return value.toI32();
  }

  set buyBackCount(value: i32) {
    this.set("buyBackCount", Value.fromI32(value));
  }

  get redeemCount(): i32 {
    let value = this.get("redeemCount");
    return value.toI32();
  }

  set redeemCount(value: i32) {
    this.set("redeemCount", Value.fromI32(value));
  }

  get tradeCount(): i32 {
    let value = this.get("tradeCount");
    return value.toI32();
  }

  set tradeCount(value: i32) {
    this.set("tradeCount", Value.fromI32(value));
  }

  get firstSeen(): i32 {
    let value = this.get("firstSeen");
    return value.toI32();
  }

  set firstSeen(value: i32) {
    this.set("firstSeen", Value.fromI32(value));
  }

  get lastSeen(): i32 {
    let value = this.get("lastSeen");
    return value.toI32();
  }

  set lastSeen(value: i32) {
    this.set("lastSeen", Value.fromI32(value));
  }
}
